要件

【機能】

基本的に、上記の完成アプリケーションと同じにすること

〇：ページごとのURL

〇：ページに存在する各種リンク

〇：本の投稿に関するモデルは「Book」とすること

〇：Bookモデルには以下の名前でカラムを作成すること
〇：title：本のタイトル
〇：body：本の感想

〇：読んだ本のタイトルと、その本についての感想を投稿・編集・削除ができること

〇：本のタイトル、本の感想を空白で投稿したらバリデーションチェックされること
〇：本のタイトル、本の感想を空白で投稿したら投稿画面にエラーメッセージが表示されること ※エラーメッセージの日本語化はしない

画面は下記の4つを作成すること
〇：アプリケーショントップ画面
　　これまで「blogs」などディレクトリ名がトップ画面でしたが（例:http://localhost:3000/blogs/ ）、トップ画面を「/」（例:http://localhost:3000/ ）で表示できるようにしましょう。

〇：投稿一覧画面：投稿された本の感想を一覧表示する画面
〇：（一覧表示はIDの若い順に表示する）
〇：表形式で一覧表示するために、「tableタグ」を検索して、使ってみましょう！
〇：投稿詳細画面：投稿された本の感想を個別に表示する画面
〇：投稿編集画面：投稿された本の感想を編集できる画面
〇：新規投稿後と編集後は、本の詳細画面に遷移すること

〇：ルートパスを設定すること

〇：投稿・更新成功後、サクセスメッセージを表示すること。
〇：サクセスメッセージには、「successfully」をという文言を含めること。


【レイアウト / デザイン】
〇：新規投稿フォームと投稿一覧表示をindexページ内に置くこと
〇：投稿一覧表示にtableタグを用いること



Rspecによるテスト
vagrant@ubuntu-bionic:/vagrant/Assignment2_Chapter8/Bookers$ bundle exec rspec spec/ --format documentation
2019-11-14 07:46:44 WARN Selenium [DEPRECATION] Selenium::WebDriver::Chrome#driver_path= is deprecated. Use Selenium::WebDriver::Chrome::Service#driver_path= instead.

Book モデルに関するテスト
  実際に保存してみる
    有効な投稿内容の場合は保存されるか
  空白のバリデーションチェック
    titleが空白の場合にバリデーションチェックされ空白のエラーメッセージが返って きているか
    bodyが空白の場合にバリデーションチェックされ空白のエラーメッセージが返ってきているか
  titleを空白で投稿した場合に画面にエラーメッセージが表示されているか
    エラーメッセージは正しく表示されるか
  bodyを空白で投稿した場合に画面にエラーメッセージが表示されているか
    エラーメッセージは正しく表示されるか

動作に関するテスト
  トップ画面(root_path)に新規投稿ページへのリンクが表示されているか
  bookの一覧ページの表示とリンクは正しいか
    bookの一覧表示(tableタグ)と投稿フォームが同一画面に表示されているか
    bookのタイトルと感想を表示し、詳細・編集・削除のリンクが表示されているか
  bookの詳細ページへの表示内容とリンクは正しいか
    bookの詳細内容と新規登録、編集ページへのリンクが表示されているか
  bookを投稿
    正しく保存できているか
    リダイレクト先は正しいか
    サクセスメッセージは正しく表示されるか
  bookの更新
    bookが更新されているか
    リダイレクト先は正しいか
    サクセスメッセージが表示されているか
  bookの削除
    bookが削除されているか
    リダイレクト先が正しいか

Finished in 2.94 seconds (files took 5.49 seconds to load)
17 examples, 0 failures
